<?php

namespace App\Containers\{{section-name}}\{{container-name}}\UI\API\Tests\Functional;

use App\Containers\{{section-name}}\{{container-name}}\Models\{{model}};
use App\Containers\{{section-name}}\{{container-name}}\Tests\ApiTestCase;

/**
 * Class {{class-name}}.
 *
 * @group {{_container-name}}
 * @group api
 */
class {{class-name}} extends ApiTestCase
{
    protected string $url = '{{url}}';

    /**
     * Roles and permissions, to be attached on the user by default
     */
    protected array $access = [
        'permissions' => 'update-{{kebab-entities}}',
        'roles'       => '',
    ];

    public function testUpdate{{model}}(): void
    {
        $this->getTestingUser();

        ${{entity}} = {{model}}::factory()->create();

        $url = $this->buildApiUrl(
            replaces: ['{id}' => ${{entity}}->getKey()]
        );

        $data = [
            //
        ];
        $expectedData = array_merge($data, [
            'id' => ${{entity}}->getKey(),
        ]);

        $this->patchJson($url, $data)
            ->assertOk()
            ->assertJson(fn (AssertableJson $json) =>
            $json->has('_profiler')
                ->has('data', fn (AssertableJson $json) =>
                $json->whereAll($expectedData)
                    ->etc()
                )
            );

        $this->assertExistsModelWithAttributes({{model}}::class, $expectedData);
    }

    public function testUpdate{{model}}WithoutAccess(): void
    {
        $this->getTestingUserWithoutAccess();

        ${{entity}} = {{model}}::factory()->create();

        $url = $this->buildApiUrl(
            replaces: ['{id}' => ${{entity}}->getKey()]
        );
        $data = [
            //
        ];

        $this->patchJson($url, $data)
            ->assertStatus(403);
    }

    public function testUpdateNonExisting{{model}}(): void
    {
        $this->getTestingUser();

        $fake{{model}}Id = 7777;
        $url = $this->buildApiUrl(
            replaces: ['{id}' => $fake{{model}}Id]
        );
        $data = [
            //
        ];

        $this->patchJson($url, $data)
            ->assertStatus(404);
    }
}
